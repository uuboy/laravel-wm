<style lang="less">
.create {
    width: 45px;
    height: 45px;
    position: fixed;
    bottom: 30px;
    right: 40px;
    opacity: .8;
}
.options{
  margin-left: 20px;
}
.restore{
  position: absolute;
  right: 20px;
  top:20px;
  width: 30px;
  height: 30px;
  opacity: .7;
}
</style>
<template>
<view class="page">
  <view class="page__hd">
    <view class="weui-flex">
      <view class="weui-flex__item">单据回收站</view>
    </view>
  </view>
  <view class="page__bd">
    <view class="weui-cells__title">
      <button class="weui-btn mini-btn options" type="warn" size="mini" catchtap="deleteBillAll()">清空回收站</button>
    </view>

    <view class="weui-cells weui-cells_after-title">
      <repeat for="{{bills}}" key="id" index="index" item="bill">
        <view class="weui-cell">
          <view class="weui-cell__hd"></view>
          <view class="weui-cell__bd">{{ bill.good.name }}</view>
          <view class="weui-cell__ft">{{ bill.num }}</view>
          <view class="weui-cell__ft" wx:if="{{ bill.can_delete }}">
            <button class="weui-btn mini-btn options" type="warn" size="mini" catchtap="deleteBill({{bill.id}},{{bill.good.id}})">删除</button>
            <button class="weui-btn mini-btn options" type="primary" size="mini" catchtap="restoreBill({{bill.id}},{{bill.good.id}})">恢复</button>
          </view>
        </view>
      </repeat>
    </view>
    <view class="weui-loadmore weui-loadmore_line" wx:if="{{ noMoreData }}">
      <view class="weui-loadmore__tips weui-loadmore__tips_in-line bgF8">没有更多数据</view>
    </view>
  </view>
</view>
</template>
<script>
  import wepy from 'wepy'
  import api from '@/utils/api'
  import util from '@/utils/util'

  export default class BillsIndexTrashed extends wepy.page {
    config = {
      enablePullDownRefresh: true
    }

    data = {
      bills: [],
      id: 0,
      page: 1,
      isLoading: false,
      noMoreData: false,
      repository_id: 0
    }

    methods = {
      async deleteBill(billId, billGoodId) {
        let res = await wepy.showModal({
          title: '确认永久删除',
          content: '您确认永久删除该单据么',
          confirmText: '永久删除',
          cancelText: '取消'
        })

        if (!res.confirm) {
          return
        }

        try {
          let deleteResponse = await api.authRequest({
            url: 'repositories/' + this.repository_id + '/inventories/' + this.id + '/goods/' + billGoodId + '/bills/forceDestroy',
            data: {
              bill_id: billId
            },
            method: 'DELETE'
          })

          if (deleteResponse.statusCode === 204) {
            let pages = this.getCurrentPages()
            if (pages.length > 1) {
              // 检查所有已经打开的页面
              let refreshPages = []
              pages.forEach((page) => {
                if (page.route === 'pages/bills/index') {
                  refreshPages.push(page.route)
                }
              })
              this.$parent.globalData.refreshPages = this.$parent.globalData.refreshPages.concat(refreshPages)
            }
            this.bills = this.bills.filter((bill) => bill.id !== billId)
            this.$apply()
            wepy.showToast({
              title: '删除成功',
              icon: 'success',
              duration: 2000
            })
          }
        } catch (err) {
          wepy.showModal({
            title: '提示',
            content: '服务器错误，请联系管理员'
          })
        }
      },
      async restoreBill(billId, billGoodId) {
        let res = await wepy.showModal({
          title: '确认恢复',
          content: '您确认恢复该单据么',
          confirmText: '恢复',
          cancelText: '取消'
        })

        if (!res.confirm) {
          return
        }

        try {
          let restoreResponse = await api.authRequest({
            url: 'repositories/' + this.repository_id + '/inventories/' + this.id + '/goods/' + billGoodId + '/bills/restore',
            data: {
              bill_id: billId
            },
            method: 'POST'
          })

          if (restoreResponse.statusCode === 200) {
            let pages = this.getCurrentPages()
            if (pages.length > 1) {
              // 检查所有已经打开的页面
              let refreshPages = []
              pages.forEach((page) => {
                if (page.route === 'pages/bills/index') {
                  refreshPages.push(page.route)
                }
              })
              this.$parent.globalData.refreshPages = this.$parent.globalData.refreshPages.concat(refreshPages)
            }
            this.bills = this.bills.filter((bill) => bill.id !== billId)
            this.$apply()
            wepy.showToast({
              title: '恢复成功',
              icon: 'success',
              duration: 2000
            })
          }
        } catch (err) {
          wepy.showModal({
            title: '提示',
            content: '服务器错误，请联系管理员'
          })
        }
      },
      async deleteBillAll() {
        let res = await wepy.showModal({
          title: '确认彻底清空',
          content: '您确认彻底清空回收站吗',
          confirmText: '清空',
          cancelText: '取消'
        })

        if (!res.confirm) {
          return
        }

        try {
          let deleteResponse = await api.authRequest({
            url: 'repositories/' + this.repository_id + '/inventories/' + this.id + '/bills/trashed/forceDestroy',
            method: 'DELETE'
          })

          if (deleteResponse.statusCode === 204) {
            let pages = this.getCurrentPages()
            if (pages.length > 1) {
              // 检查所有已经打开的页面
              let refreshPages = []
              pages.forEach((page) => {
                if (page.route === 'pages/bills/index') {
                  refreshPages.push(page.route)
                }
              })
              this.$parent.globalData.refreshPages = this.$parent.globalData.refreshPages.concat(refreshPages)
            }
            this.bills = []
            this.$apply()
            wepy.showToast({
              title: '删除成功',
              icon: 'success',
              duration: 2000
            })
          }
        } catch (err) {
          wepy.showModal({
            title: '提示',
            content: '服务器错误，请联系管理员'
          })
        }
      }
    }

    async onPullDownRefresh() {
      if (!this.$parent.checkLogin()) {
        wepy.navigateTo({
          url: '/pages/auth/login'
        })
      } else {
        this.page = 1
        this.$apply()
        await this.getBills(this.id, this.page, true)
        wepy.stopPullDownRefresh()
      }
    }

    async onReachBottom() {
      // 如果没有更多内容，直接返回
      if (this.noMoreData || this.isLoading) {
        return
      }
      this.isLoading = true
      this.page = this.page + 1
      await this.getBills(this.id, this.page, false)
      this.isLoading = false
      this.$apply()
    }

    async onLoad(options) {
      if (!this.$parent.checkLogin()) {
        wepy.navigateTo({
          url: '/pages/auth/login'
        })
      } else {
        this.id = options.inventory_id
        this.repository_id = options.repository_id
        this.$apply()
        await this.getBills(this.id, this.page, true)
      }
    }

    async onShow() {
      if (!this.$parent.checkLogin()) {
        wepy.navigateTo({
          url: '/pages/auth/login'
        })
      } else {
        this.$parent.checkRefreshPages(this.getCurrentPages().pop().route, () => {
          this.noMoreData = false
          this.page = 1
          this.$apply()
          this.getBills(this.id, this.page, true)
        })
      }
    }

    async getBills(id, page = 1, reset = false) {
      try {
        let billsResponse = await api.authRequest({
          url: 'repositories/' + this.repository_id + '/inventories/' + id + '/bills/trashed',
          data: {
            page: page,
            include: 'good'
          },
          method: 'GET'
        })
        let user = await this.$parent.getCurrentUser()
        if (billsResponse.statusCode === 200) {
          let bills = billsResponse.data.data
          bills.forEach((bill) => {
            bill.can_delete = this.canDelete(user, bill)
            bill.updated_at_diff = util.diffForHumans(bill.updated_at)
          })
          this.bills = reset ? bills : this.bills.concat(bills)
          let pagination = billsResponse.data.meta.pagination
          // 根据分页设置是否还有更多数据
          if (pagination.current_page === pagination.total_pages) {
            this.noMoreData = true
          } else {
            this.noMoreData = false
          }
          this.$apply()
        }
      } catch (err) {
        wepy.showModal({
          title: '提示',
          content: '服务器错误，请联系管理员1'
        })
      }
    }

    canDelete(user, bill) {
      if (!user) {
        return false
      }
      return (bill.user_id === user.id)
    }
  }
</script>
