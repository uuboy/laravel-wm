<style lang="less">
.avatar {
  width: 40px;
  height: 40px;
  display: block;
  border-radius: 50%;
}
</style>
<template>
  <view class="page">
    <view class="page__hd">
      <view class="weui-flex">
        <view class="weui-flex__item">
          选择协作者
        </view>
      </view>
    </view>
    <view class="page__bd">
      <view class="weui-panel weui-panel_access">
        <view class="weui-panel__hd">
          用户列表
        </view>
        <view class="weui-panel__bd">
          <repeat for="{{ users }}" key="id" index="index" item="user">
            <view class="weui-media-box weui-media-box_appmsg" hover-class="weui-cell_active" catchtap="selectUser({{user.id}})">
              <view class="weui-media-box__hd weui-media-box__hd_in-appmsg">
                <image class="avatar" src="{{ user.avatar }}"/>
              </view>
              <view class="weui-media-box__bd weui-media-box__bd_in-appmsg">
                <view class="weui-media-box__title">{{ user.name }}</view>
                <view class="weui-media-box__info">
                  <view class="weui-media-box__info__meta">{{ user.updated_at_diff }}</view>
                </view>
              </view>
            </view>
          </repeat>
        </view>
        <view class="weui-loadmore weui-loadmore_line" wx:if="{{ noMoreData }}">
          <view class="weui-loadmore__tips weui-loadmore__tips_in-line">没有更多数据</view>
        </view>
      </view>
    </view>
  </view>
</template>
<script>
  import wepy from 'wepy'
  import api from '@/utils/api'
  import util from '@/utils/util'

  export default class PartersCreate extends wepy.page {
    config = {
      navigationBarTitleText: '创建协作者',
      enablePullDownRefresh: true
    }

    data = {
      users: [],
      page: 1,
      isLoading: false,
      noMoreData: false,
      repository_id: 0
    }

    methods = {
      async selectUser(userId) {
        try {
          let selectUserResponse = await api.authRequest({
            url: 'repositories/' + this.repository_id + '/parters',
            data: {
              user_id: userId
            },
            method: 'POST'
          })

          if (selectUserResponse.statusCode === 201) {
            let pages = this.getCurrentPages()
            // 如果有上一页
            if (pages.length > 1) {
              // 检查所有已经打开的页面
              let refreshPages = []
              pages.forEach((page) => {
                if (page.route === 'pages/parters/index') {
                  refreshPages.push(page.route)
                }
              })
              this.$parent.globalData.refreshPages = this.$parent.globalData.refreshPages.concat(refreshPages)
              this.$apply()
            }
            wepy.showToast({
              title: '添加成功',
              icon: 'success'
            })

            setTimeout(function() {
              wepy.navigateBack()
            }, 1000)
          }
        } catch (err) {
          wepy.showModal({
            title: '提示',
            content: '服务器错误，请联系管理员'
          })
        }
      }
    }

    async getUsers(page = 1, reset = false) {
      try {
        let usersResponse = await api.authRequest({
          url: 'users',
          data: {
            page: page
          },
          method: 'GET'
        })
        if (usersResponse.statusCode === 200) {
          let users = usersResponse.data.data
          users.forEach(function (user) {
            user.updated_at_diff = util.diffForHumans(user.updated_at)
          })
          this.users = reset ? users : this.users.concat(users)
          let pagination = usersResponse.data.meta.pagination
          // 根据分页设置是否还有更多数据
          if (pagination.current_page === pagination.total_pages) {
            this.noMoreData = true
          } else {
            this.noMoreData = false
          }
          this.$apply()
        }
      } catch (err) {
        wepy.showModal({
          title: '提示',
          content: '服务器错误，请联系管理员'
        })
      }
    }

    async onLoad(options) {
      if (!this.$parent.checkLogin()) {
        wepy.navigateTo({
          url: '/pages/auth/login'
        })
      } else {
        this.repository_id = options.repository_id
        await this.getUsers(this.page, true)
        this.$apply()
      }
    }

    async onShow() {
      if (!this.$parent.checkLogin()) {
        wepy.navigateTo({
          url: '/pages/auth/login'
        })
      } else {
        this.$parent.checkRefreshPages(this.getCurrentPages().pop().route, () => {
          this.noMoreData = false
          this.page = 1
          this.getUsers(this.page, true)
          this.$apply()
        })
      }
    }

    async onPullDownRefresh() {
      if (!this.$parent.checkLogin()) {
        wepy.navigateTo({
          url: '/pages/auth/login'
        })
      } else {
        this.page = 1
        await this.getUsers(this.page, true)
        this.$apply()
      }
    }

    async onReachBottom () {
      // 如果没有更多内容，直接返回
      if (this.noMoreData || this.isLoading) {
        return
      }
      this.isLoading = true
      this.page = this.page + 1
      await this.getUsers(this.page, false)
      this.isLoading = false
      this.$apply()
    }
  }

</script>
