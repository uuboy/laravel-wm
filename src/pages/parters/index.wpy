<style lang="less">
.create {
    width: 45px;
    height: 45px;
    position: fixed;
    bottom: 30px;
    right: 40px;
    opacity: .8;
}
.delete{
  margin-right: 20px;
  float: right;
  width: 20px;
  height: 20px;
}
.avatar {
  width: 25px;
  height: 25px;
  display: block;
  border-radius: 50%;
}
</style>
<template>
<view class="page">
  <view class="page__hd">
    <view class="weui-flex">
      <view class="weui-flex__item">协作者列表</view>
    </view>
  </view>
  <view class="page__bd">
    <view class="weui-cells__title">仓库的协作者列表</view>
    <view class="weui-cells weui-cells_after-title">
      <repeat for="{{parters}}" key="id" index="index" item="parter">
        <view class="weui-cell">
          <view class="weui-cell__hd">
             <image class="avatar" src="{{ parter.user.avatar }}"/>
          </view>
          <view class="weui-cell__bd">{{ parter.user.name }}</view>
          <view class="weui-cell__ft" wx:if="{{ parter.can_delete }}">
            <image src="/images/delete.png" class="delete" catchtap="deleteParter({{parter.id}})"/>
          </view>
        </view>
      </repeat>
    </view>
    <view class="weui-loadmore weui-loadmore_line" wx:if="{{ noMoreData }}">
      <view class="weui-loadmore__tips weui-loadmore__tips_in-line bgF8">没有更多数据</view>
    </view>
    <!-- 清单新建按钮 -->
    <navigator url="/pages/parters/create?repository_id={{repository_id}}">
      <image src="/images/create3.png" class="create"/>
    </navigator>
  </view>
</view>
</template>
<script>
  import wepy from 'wepy'
  import api from '@/utils/api'
  import util from '@/utils/util'

  export default class PartersIndex extends wepy.page {
    config = {
      enablePullDownRefresh: true
    }

    data = {
      parters: [],
      page: 1,
      isLoading: false,
      noMoreData: false,
      repository_id: 0,
      user_id: 0
    }

    methods = {
      async deleteParter(parterId) {
        let res = await wepy.showModal({
          title: '确认删除',
          content: '您确认删除该协作者么',
          confirmText: '删除',
          cancelText: '取消'
        })

        if (!res.confirm) {
          return
        }

        try {
          let deleteResponse = await api.authRequest({
            url: 'repositories/' + this.repository_id + '/parters/' + parterId,
            method: 'DELETE'
          })

          if (deleteResponse.statusCode === 204) {
            let pages = this.getCurrentPages()
            if (pages.length > 1) {
              // 检查所有已经打开的页面
              let refreshPages = []
              pages.forEach((page) => {
                if (page.route === 'pages/parters/index') {
                  refreshPages.push(page.route)
                }
              })
              this.$parent.globalData.refreshPages = this.$parent.globalData.refreshPages.concat(refreshPages)
            }
            this.parters = this.parters.filter((parter) => parter.id !== parterId)
            this.$apply()
            wepy.showToast({
              title: '删除成功',
              icon: 'success',
              duration: 2000
            })
          }
        } catch (err) {
          wepy.showModal({
            title: '提示',
            content: '服务器错误，请联系管理员'
          })
        }
      }
    }

    async onPullDownRefresh() {
      if (!this.$parent.checkLogin()) {
        wepy.navigateTo({
          url: '/pages/auth/login'
        })
      } else {
        this.page = 1
        this.$apply()
        await this.getParters(this.page, true)
        wepy.stopPullDownRefresh()
      }
    }

    async onReachBottom() {
      // 如果没有更多内容，直接返回
      if (this.noMoreData || this.isLoading) {
        return
      }
      this.isLoading = true
      this.page = this.page + 1
      await this.getParters(this.page, false)
      this.isLoading = false
      this.$apply()
    }

    async onLoad(options) {
      if (!this.$parent.checkLogin()) {
        wepy.navigateTo({
          url: '/pages/auth/login'
        })
      } else {
        this.user_id = options.user_id
        this.repository_id = options.repository_id
        await this.getParters(this.page, true)
        this.$apply()
      }
    }

    async onShow() {
      if (!this.$parent.checkLogin()) {
        wepy.navigateTo({
          url: '/pages/auth/login'
        })
      } else {
        this.$parent.checkRefreshPages(this.getCurrentPages().pop().route, () => {
          this.noMoreData = false
          this.page = 1
          this.getParters(this.page, true)
          this.$apply()
        })
      }
    }

    async getParters(page = 1, reset = false) {
      try {
        let partersResponse = await api.authRequest({
          url: 'repositories/' + this.repository_id + '/parters',
          data: {
            page: page,
            include: 'user,repository'
          },
          method: 'GET'
        })
        let user = await this.$parent.getCurrentUser()
        if (partersResponse.statusCode === 200) {
          let parters = partersResponse.data.data
          parters.forEach((parter) => {
            parter.can_delete = this.canDelete(user, parter.repository.user_id)
            parter.updated_at_diff = util.diffForHumans(parter.updated_at)
          })
          this.parters = reset ? parters : this.parters.concat(parters)
          let pagination = partersResponse.data.meta.pagination
          // 根据分页设置是否还有更多数据
          if (pagination.current_page === pagination.total_pages) {
            this.noMoreData = true
          } else {
            this.noMoreData = false
          }
          this.$apply()
        }
      } catch (err) {
        wepy.showModal({
          title: '提示',
          content: '服务器错误，请联系管理员'
        })
      }
    }

    canDelete(user, userId) {
      if (!user) {
        return false
      }
      return (userId === user.id)
    }
  }
</script>
